version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: notify-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      app-network:
        ipv4_address: 172.28.1.10
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    networks:
      app-network:
        ipv4_address: 172.28.1.11
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  notifier-app:
    image: ghcr.io/gurodrigues-dev/notifier-app:latest
    ports:
      - "9999:9999"
    volumes:
      - ./config:/app/config
    environment:
      ENVIRONMENT: development
    networks:
      app-network:
        ipv4_address: 172.28.1.20
    deploy:
      replicas: 3
      restart_policy:
        condition: always

  notifier-dispatcher:
    image: ghcr.io/gurodrigues-dev/notifier-dispatcher:latest
    volumes:
      - ./config:/app/config
    environment:
      ENVIRONMENT: development
    networks:
      app-network:
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      app-network:
        ipv4_address: 172.28.1.30
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      app-network:
        ipv4_address: 172.28.1.31
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"
    networks:
      app-network:
        ipv4_address: 172.28.1.32
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  metabase:
    image: metabase/metabase:latest
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: notify-db
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: admin
      MB_DB_HOST: postgres
    networks:
      app-network:
        ipv4_address: 172.28.1.33
    deploy:
      replicas: 1
      restart_policy:
        condition: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      app-network:
        ipv4_address: 172.28.1.40
    deploy:
      replicas: 1
      restart_policy:
        condition: unless-stopped

  broker:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      app-network:
        ipv4_address: 172.28.1.41
    deploy:
      replicas: 1
      restart_policy:
        condition: unless-stopped

  create-topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - broker
    command: >
      bash -c "cub kafka-ready -b broker:29092 1 120 &&
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --partitions 2 --replication-factor 1 --topic notifications"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      app-network:
        ipv4_address: 172.28.1.42
    deploy:
      replicas: 1
      restart_policy:
        condition: none

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8092:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      app-network:
        ipv4_address: 172.28.1.43
    deploy:
      replicas: 1
      restart_policy:
        condition: unless-stopped

networks:
  app-network:
    driver: overlay
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  redis_data:
  grafana_data:
