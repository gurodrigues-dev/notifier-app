// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/gurodrigues-dev/notifier-app/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// CreateNotification provides a mock function with given fields: notification
func (_m *NotificationRepository) CreateNotification(notification *entity.NotificationError) error {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.NotificationError) error); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotificationByID provides a mock function with given fields: id
func (_m *NotificationRepository) GetNotificationByID(id string) (*entity.NotificationError, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByID")
	}

	var r0 *entity.NotificationError
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.NotificationError, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.NotificationError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.NotificationError)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
