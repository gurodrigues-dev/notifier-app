// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/gurodrigues-dev/notifier-app/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ChannelRepository is an autogenerated mock type for the ChannelRepository type
type ChannelRepository struct {
	mock.Mock
}

// CreateChannel provides a mock function with given fields: channel
func (_m *ChannelRepository) CreateChannel(channel *entity.Channel) (*entity.Channel, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Channel) (*entity.Channel, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(*entity.Channel) *entity.Channel); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Channel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: id
func (_m *ChannelRepository) DeleteByID(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByGroup provides a mock function with given fields: group
func (_m *ChannelRepository) GetByGroup(group string) ([]entity.Channel, error) {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for GetByGroup")
	}

	var r0 []entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Channel, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Channel); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByGroups provides a mock function with given fields: groups
func (_m *ChannelRepository) GetByGroups(groups []string) ([]entity.Channel, error) {
	ret := _m.Called(groups)

	if len(ret) == 0 {
		panic("no return value specified for GetByGroups")
	}

	var r0 []entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]entity.Channel, error)); ok {
		return rf(groups)
	}
	if rf, ok := ret.Get(0).(func([]string) []entity.Channel); ok {
		r0 = rf(groups)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(groups)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ChannelRepository) GetByID(id string) (*entity.Channel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Channel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Channel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDs provides a mock function with given fields: ids
func (_m *ChannelRepository) GetByIDs(ids []string) ([]entity.Channel, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]entity.Channel, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []entity.Channel); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPlatform provides a mock function with given fields: platform
func (_m *ChannelRepository) GetByPlatform(platform string) ([]entity.Channel, error) {
	ret := _m.Called(platform)

	if len(ret) == 0 {
		panic("no return value specified for GetByPlatform")
	}

	var r0 []entity.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Channel, error)); ok {
		return rf(platform)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Channel); ok {
		r0 = rf(platform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(platform)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChannelRepository creates a new instance of ChannelRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChannelRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChannelRepository {
	mock := &ChannelRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
