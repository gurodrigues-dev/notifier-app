// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Consumer provides a mock function with given fields: topic, group, handler
func (_m *Queue) Consumer(topic string, group string, handler func(string)) error {
	ret := _m.Called(topic, group, handler)

	if len(ret) == 0 {
		panic("no return value specified for Consumer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(string)) error); ok {
		r0 = rf(topic, group, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Produce provides a mock function with given fields: topic, message
func (_m *Queue) Produce(topic string, message string) error {
	ret := _m.Called(topic, message)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
