// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	contracts "github.com/gurodrigues-dev/notifier-app/internal/infra/contracts"

	mock "github.com/stretchr/testify/mock"
)

// Webhook is an autogenerated mock type for the Webhook type
type Webhook struct {
	mock.Mock
}

// Post provides a mock function with given fields: url, contentType, body
func (_m *Webhook) Post(url string, contentType string, body io.Reader) (*contracts.HTTPResponse, error) {
	ret := _m.Called(url, contentType, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *contracts.HTTPResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) (*contracts.HTTPResponse, error)); ok {
		return rf(url, contentType, body)
	}
	if rf, ok := ret.Get(0).(func(string, string, io.Reader) *contracts.HTTPResponse); ok {
		r0 = rf(url, contentType, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contracts.HTTPResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, io.Reader) error); ok {
		r1 = rf(url, contentType, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWebhook creates a new instance of Webhook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhook(t interface {
	mock.TestingT
	Cleanup(func())
}) *Webhook {
	mock := &Webhook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
