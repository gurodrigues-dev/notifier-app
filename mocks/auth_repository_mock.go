// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/gurodrigues-dev/notifier-app/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: token
func (_m *AuthRepository) CreateToken(token *entity.Token) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Token) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: email
func (_m *AuthRepository) DeleteToken(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetToken provides a mock function with given fields: token
func (_m *AuthRepository) GetToken(token string) (*entity.Token, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *entity.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Token, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenByUser provides a mock function with given fields: email
func (_m *AuthRepository) GetTokenByUser(email string) (*entity.Token, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenByUser")
	}

	var r0 *entity.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Token, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Token); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
