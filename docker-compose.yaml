version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: notify-db
    networks:
      app-network:
        ipv4_address: 172.28.1.10
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    restart: always
    networks:
      app-network:
        ipv4_address: 172.28.1.11
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # notify-app:
  #   image: ghcr.io/gurodrigues-dev/notify-app:latest
  #   container_name: notify-app
  #   restart: always
  #   ports:
  #     - "9999:9999"
  #   volumes:
  #     - ./config:/app/config
  #   environment:
  #     ENVIRONMENT: "development"
  #   networks:
  #     app-network:
  #       ipv4_address: 172.28.1.20

  # notify-dispatcher:
  #   image: ghcr.io/gurodrigues-dev/notify-dispatcher:latest
  #   restart: always
  #   volumes:
  #     - ./config:/app/config
  #   environment:
  #     ENVIRONMENT: "development"
  #   networks:
  #     - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      app-network:
        ipv4_address: 172.28.1.30

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      app-network:
        ipv4_address: 172.28.1.31

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    ports:
      - "9093:9093"
    networks:
      app-network:
        ipv4_address: 172.28.1.32

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    ports:
      - "3001:3000"
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=notify-db
      - MB_DB_PORT=5432
      - MB_DB_USER=postgres
      - MB_DB_PASS=admin
      - MB_DB_HOST=postgres
    networks:
      app-network:
        ipv4_address: 172.28.1.33

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      app-network:
        ipv4_address: 172.28.1.40

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    restart: unless-stopped
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      app-network:
        ipv4_address: 172.28.1.41

  create-topics:
    image: confluentinc/cp-kafka:latest
    hostname: create-topics
    container_name: create-topics
    depends_on:
      - broker
    command: "
      bash -c 'cub kafka-ready -b broker:29092 1 120 && \
      kafka-topics --create --if-not-exists --bootstrap-server broker:29092 --partitions 2 --replication-factor 1 --topic notifications'"
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      app-network:
        ipv4_address: 172.28.1.42

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - broker
    ports:
      - "8092:8080"
    restart: unless-stopped
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=broker:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      app-network:
        ipv4_address: 172.28.1.43

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  redis_data:
  grafana_data:
